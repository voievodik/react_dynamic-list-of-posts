{"version":3,"sources":["context/PostsContext.tsx","components/PostsList.tsx","context/UsersContext.tsx","utils/fetchClient.ts","context/ErrorContext.tsx","components/UserSelector.tsx","api/users.ts","components/Loader/Loader.tsx","context/CommentsContext.tsx","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/Sidebar.tsx","App.tsx","api/posts.ts","index.tsx"],"names":["PostsContext","createContext","posts","setPosts","post","setPost","PostsProvider","children","useState","value","useMemo","Provider","PostsList","useContext","className","map","currentPost","id","title","type","classnames","onClick","handleSelectPost","UsersContext","users","setUsers","user","setUser","UsersProvider","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","ErrorContext","isErrorHappen","setIsErrorHappen","ErrorProvider","UserSelector","isUsersOpen","setIsUsersOpen","useEffect","catch","prev","name","role","onBlur","currentUser","href","Loader","CommentsContext","comments","setComments","CommentsProvider","defaultFormData","email","NewCommentForm","formData","setFormData","hasErrorForm","setHasErrorForm","handleChangeForm","event","preventDefault","target","hasEmailError","trim","hasNameError","hasBodyError","onSubmit","newComment","Date","postId","createComment","error","onReset","htmlFor","placeholder","onChange","PostDetails","hasCommentsError","setHasCommentsError","isLoasding","setIsLoading","isWriteCommentExist","setIsWriteCommentExist","handleDeleteComment","commentId","deleteCommentById","prevComments","filter","finally","length","currentComment","Sidebar","classNames","App","isLoading","userId","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7cca8319.chunk.js","sourcesContent":["import { createContext, useState, useMemo } from 'react';\nimport { Post } from '../types/Post';\n\nexport const PostsContext = createContext<{\n  posts: Post[];\n  setPosts: React.Dispatch<React.SetStateAction<Post[]>>;\n  post: Post | null;\n  setPost: React.Dispatch<React.SetStateAction<Post | null>>;\n}>({\n  posts: [],\n  setPosts: () => {},\n  post: null,\n  setPost: () => {},\n});\n\nexport const PostsProvider = ({ children }: { children: React.ReactNode }) => {\n  const [posts, setPosts] = useState<Post[] | []>([]);\n  const [post, setPost] = useState<Post | null>(null);\n\n  const value = useMemo(() => ({\n    posts,\n    setPosts,\n    post,\n    setPost,\n  }), [posts, post]);\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { useContext } from 'react';\nimport classnames from 'classnames';\nimport { PostsContext } from '../context/PostsContext';\nimport { Post } from '../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const { posts, post, setPost } = useContext(PostsContext);\n\n  const handleSelectPost = (currentPost: Post | null) => {\n    if (post?.id !== currentPost?.id) {\n      setPost(currentPost);\n\n      return;\n    }\n\n    setPost(null);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(currentPost => {\n            const { id, title } = currentPost;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classnames('button is-link', {\n                      'is-light': post?.id !== id,\n                    })}\n                    onClick={() => handleSelectPost(currentPost)}\n                  >\n                    {(post?.id === id)\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { createContext, useState, useMemo } from 'react';\nimport { User } from '../types/User';\n\nexport const UsersContext = createContext<{\n  users: User[];\n  setUsers: React.Dispatch<React.SetStateAction<User[]>>;\n  user: User | null;\n  setUser: React.Dispatch<React.SetStateAction<User | null>>;\n}>({\n  users: [],\n  setUsers: () => {},\n  user: null,\n  setUser: () => {},\n});\n\nexport const UsersProvider = ({ children }: { children: React.ReactNode }) => {\n  const [users, setUsers] = useState<User[] | []>([]);\n  const [user, setUser] = useState<User | null>(null);\n\n  const value = useMemo(() => ({\n    users,\n    setUsers,\n    user,\n    setUser,\n  }), [users, user]);\n\n  return (\n    <UsersContext.Provider value={value}>\n      {children}\n    </UsersContext.Provider>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { createContext, useState, useMemo } from 'react';\n\nexport const ErrorContext = createContext<{\n  isErrorHappen: boolean;\n  setIsErrorHappen: React.Dispatch<React.SetStateAction<boolean>>;\n}>({\n  isErrorHappen: false,\n  setIsErrorHappen: () => {},\n});\n\nexport const ErrorProvider = ({ children }: { children: React.ReactNode }) => {\n  const [isErrorHappen, setIsErrorHappen] = useState(false);\n\n  const value = useMemo(() => ({\n    isErrorHappen,\n    setIsErrorHappen,\n  }), [isErrorHappen]);\n\n  return (\n    <ErrorContext.Provider value={value}>\n      {children}\n    </ErrorContext.Provider>\n  );\n};\n","import { useContext, useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport { UsersContext } from '../context/UsersContext';\nimport { getUsers } from '../api/users';\nimport { ErrorContext } from '../context/ErrorContext';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users, setUsers, user, setUser,\n  } = useContext(UsersContext);\n  const { setIsErrorHappen } = useContext(ErrorContext);\n\n  const [isUsersOpen, setIsUsersOpen] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setIsErrorHappen(true));\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsUsersOpen(prev => !prev)}\n        >\n          <span>\n            {!user ? 'Choose a user' : user.name }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isUsersOpen && (\n        <div\n          className=\"dropdown-menu\"\n          id=\"dropdown-menu\"\n          role=\"menu\"\n          onBlur={() => setIsUsersOpen(false)}\n        >\n          <div className=\"dropdown-content\">\n            {users.map(currentUser => {\n              const { id, name } = currentUser;\n\n              return (\n                <a\n                  key={id}\n                  href={`#user-${id}`}\n                  className={classnames(\n                    'dropdown-item', {\n                      'is-active': id === user?.id,\n                    },\n                  )}\n                  onClick={() => {\n                    setIsUsersOpen(prev => !prev);\n                    setUser(currentUser);\n                  }}\n                >\n                  {name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import './Loader.scss';\r\n\r\nexport const Loader = () => (\r\n  <div className=\"Loader\" data-cy=\"Loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","import { createContext, useState, useMemo } from 'react';\nimport { Comment } from '../types/Comment';\n\nexport const CommentsContext = createContext<{\n  comments: Comment[];\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n}>({\n  comments: [],\n  setComments: () => {},\n});\n\nexport const CommentsProvider = ({ children }: {\n  children: React.ReactNode,\n}) => {\n  const [comments, setComments] = useState<Comment[] | []>([]);\n\n  const value = useMemo(() => ({\n    comments,\n    setComments,\n  }), [comments]);\n\n  return (\n    <CommentsContext.Provider value={value}>\n      {children}\n    </CommentsContext.Provider>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport classnames from 'classnames';\nimport { createComment } from '../api/comments';\nimport { PostsContext } from '../context/PostsContext';\nimport { CommentsContext } from '../context/CommentsContext';\nimport { Comment } from '../types/Comment';\n\nconst defaultFormData = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nexport const NewCommentForm: React.FC = () => {\n  const { post } = useContext(PostsContext);\n  const { setComments } = useContext(CommentsContext);\n\n  const [formData, setFormData] = useState(defaultFormData);\n  const [hasErrorForm, setHasErrorForm] = useState(false);\n\n  const handleChangeForm = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    event.preventDefault();\n\n    setFormData(prev => ({ ...prev, [event.target.name]: event.target.value }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setHasErrorForm(true);\n\n    if (!formData.email || !formData.body || !formData.name) {\n      setHasErrorForm(true);\n\n      return;\n    }\n\n    if (post) {\n      const newComment = {\n        id: +new Date(),\n        name: formData.name,\n        email: formData.email,\n        body: formData.body,\n        postId: post?.id,\n      };\n\n      createComment(newComment)\n        .then(() => {\n          setComments((prev: Comment[]) => [...prev, newComment]);\n        })\n        .catch((error) => error.json());\n    }\n\n    setHasErrorForm(false);\n  };\n\n  const handleReset = () => {\n    setFormData(defaultFormData);\n  };\n\n  const hasEmailError = !formData.email.trim() && hasErrorForm;\n  const hasNameError = !formData.name.trim() && hasErrorForm;\n  const hasBodyError = !formData.body.trim() && hasErrorForm;\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classnames('input', {\n              'is-danger': hasNameError,\n            })}\n            value={formData.name}\n            onChange={handleChangeForm}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classnames('input', {\n              'is-danger': hasEmailError,\n            })}\n            value={formData.email}\n            onChange={handleChangeForm}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classnames('textarea', {\n              'is-danger': hasBodyError,\n            })}\n            value={formData.body}\n            onChange={handleChangeForm}\n          />\n        </div>\n\n        {hasBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-link \">\n            Add\n          </button>\n        </div>\n        {/* is-loading */}\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getCommentsById = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteCommentById = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\n// export const createComment = (data: Comment) => {\n//   return client.post<Comment>('/comments', data);\n// };\n\nexport const createComment = ({\n  name, email, body, postId,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    name, email, body, postId,\n  });\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { PostsContext } from '../context/PostsContext';\nimport { deleteCommentById, getCommentsById } from '../api/comments';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentsContext } from '../context/CommentsContext';\n\nexport const PostDetails: React.FC = () => {\n  const { post } = useContext(PostsContext);\n  const { comments, setComments } = useContext(CommentsContext);\n\n  const [hasCommentsError, setHasCommentsError] = useState(false);\n  const [isLoasding, setIsLoading] = useState(false);\n  const [isWriteCommentExist, setIsWriteCommentExist] = useState(false);\n\n  const handleDeleteComment = (commentId: number) => {\n    deleteCommentById(commentId)\n      .then(() => {\n        setComments(prevComments => {\n          return prevComments.filter(({ id }) => id !== commentId);\n        });\n      });\n  };\n\n  useEffect(() => {\n    if (post) {\n      setIsLoading(true);\n      getCommentsById(post.id)\n        .then(setComments)\n        .catch(() => setHasCommentsError(true))\n        .finally(() => setIsLoading(false));\n\n      setIsWriteCommentExist(false);\n    }\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoasding && <Loader />}\n\n          {hasCommentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && <p className=\"title is-4\">Comments:</p>}\n          {comments.map(currentComment => {\n            const {\n              id, email, name, body,\n            } = currentComment;\n\n            return (\n              <article className=\"message is-small\" data-cy=\"Comment\" key={id}>\n                <div className=\"message-header\">\n                  <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                    {name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComment(id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {body}\n                </div>\n              </article>\n            );\n          })}\n\n          {!isWriteCommentExist && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsWriteCommentExist(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriteCommentExist && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import { useContext } from 'react';\nimport classNames from 'classnames';\nimport { PostDetails } from './PostDetails';\nimport { PostsContext } from '../context/PostsContext';\n\nexport const Sidebar = () => {\n  const { post } = useContext(PostsContext);\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        { 'Sidebar--open': !!post },\n      )}\n    >\n      <div className=\"tile is-child box is-success \">\n        <PostDetails />\n      </div>\n    </div>\n  );\n};\n","import { useContext, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { UserSelector } from './components/UserSelector';\nimport { UsersContext } from './context/UsersContext';\nimport { getPostsById } from './api/posts';\nimport { PostsContext } from './context/PostsContext';\nimport { Loader } from './components/Loader';\nimport { ErrorContext } from './context/ErrorContext';\nimport { Sidebar } from './components/Sidebar';\n\nexport const App: React.FC = () => {\n  const { user } = useContext(UsersContext);\n  const { posts, setPosts } = useContext(PostsContext);\n  const { isErrorHappen, setIsErrorHappen } = useContext(ErrorContext);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      setIsLoading(true);\n      getPostsById(user.id)\n        .then((postsFromServer) => {\n          setPosts(postsFromServer);\n        })\n        .catch(() => setIsErrorHappen(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [user]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!user && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {user && posts.length === 0 ? (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    ) : null}\n\n                    {posts.length > 0 && user ? (\n                      <PostsList />\n                    ) : null}\n                  </>\n                )}\n\n                {isErrorHappen && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <Sidebar />\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostsById = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UsersProvider } from './context/UsersContext';\nimport { PostsProvider } from './context/PostsContext';\nimport { ErrorProvider } from './context/ErrorContext';\nimport { CommentsProvider } from './context/CommentsContext';\n\nReactDOM.render(\n  <UsersProvider>\n    <PostsProvider>\n      <CommentsProvider>\n        <ErrorProvider>\n          <App />\n        </ErrorProvider>\n      </CommentsProvider>\n    </PostsProvider>\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}